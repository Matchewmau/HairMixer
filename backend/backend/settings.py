"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env if present (project root or backend folder)
load_dotenv(dotenv_path=BASE_DIR / '.env')
load_dotenv(dotenv_path=BASE_DIR.parent / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'dev-insecure-key-change-me')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'true').lower() == 'true'

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')
# Ensure Django test client host is allowed in DEBUG
if DEBUG and 'testserver' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('testserver')

# ==============================
# Security / behavior toggles
# ==============================
# Keep defaults non-breaking; enable hardening via env when ready
DRF_REQUIRE_AUTH = (
    os.getenv('DRF_REQUIRE_AUTH', 'false').lower() == 'true'
)
RELAX_ADMIN_PERMS = (
    os.getenv('RELAX_ADMIN_PERMS', 'true').lower() == 'true'
)

# Cookie-based auth (opt-in)
AUTH_COOKIES_ENABLED = (
    os.getenv('AUTH_COOKIES_ENABLED', 'false').lower() == 'true'
)
AUTH_COOKIE_ACCESS_NAME = os.getenv(
    'AUTH_COOKIE_ACCESS_NAME', 'access_token'
)
AUTH_COOKIE_REFRESH_NAME = os.getenv(
    'AUTH_COOKIE_REFRESH_NAME', 'refresh_token'
)
# empty => no domain set
AUTH_COOKIE_DOMAIN = os.getenv('AUTH_COOKIE_DOMAIN', '')
# Lax|Strict|None
AUTH_COOKIE_SAMESITE = os.getenv('AUTH_COOKIE_SAMESITE', 'Lax')

# SSRF protection (opt-in)
ENABLE_SSRF_PROTECTION = (
    os.getenv('ENABLE_SSRF_PROTECTION', 'false').lower() == 'true'
)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_spectacular',
    'rest_framework_simplejwt',
    'corsheaders',
    'hairmixer_app',
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Request ID/structured logging middleware (env-gated)
    'hairmixer_app.middleware.RequestIDMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'UserAttributeSimilarityValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'MinimumLengthValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'CommonPasswordValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'NumericPasswordValidator'
        ),
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = []

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
CORS_ALLOW_ALL_ORIGINS = os.getenv('CORS_ALLOW_ALL', 'true').lower() == 'true'
_CORS_ALLOWED = os.getenv(
    'CORS_ALLOWED_ORIGINS',
    'http://localhost:3000,http://127.0.0.1:3000'
)
CORS_ALLOWED_ORIGINS = _CORS_ALLOWED.split(',')
# Allow credentials only when using cookie-based auth
CORS_ALLOW_CREDENTIALS = AUTH_COOKIES_ENABLED

# CSRF settings
_csrf_env = os.getenv('CSRF_TRUSTED_ORIGINS', '')
if _csrf_env:
    CSRF_TRUSTED_ORIGINS = [
        o.strip() for o in _csrf_env.split(',') if o.strip()
    ]
else:
    # Default to common local dev origins
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost:3000',
        'http://127.0.0.1:3000',
        'http://localhost:5173',
        'http://127.0.0.1:5173',
    ]

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # Toggle global default permission via env; default remains AllowAny
        (
            'rest_framework.permissions.IsAuthenticated'
            if DRF_REQUIRE_AUTH
            else 'rest_framework.permissions.AllowAny'
        ),
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour'
    },
    'EXCEPTION_HANDLER': 'hairmixer_app.exceptions.drf_exception_handler',
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Custom User Model
AUTH_USER_MODEL = 'hairmixer_app.CustomUser'

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': os.getenv('JWT_SIGNING_KEY', SECRET_KEY),
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': (
        'rest_framework_simplejwt.authentication.'
        'default_user_authentication_rule'
    ),

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# Logging
LOG_LEVEL = os.getenv('DJANGO_LOG_LEVEL', 'INFO')
JSON_LOGS = os.getenv('DJANGO_JSON_LOGS', 'false').lower() == 'true'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            # Use percent-style to avoid KeyErrors on missing extras
            'format': (
                '[%(levelname)s] %(asctime)s %(name)s '
                'req=%(request_id)s: %(message)s'
            ),
        },
        'json': {
            '()': 'hairmixer_app.middleware.JSONLogFormatter',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'json' if JSON_LOGS else 'standard',
            'filters': ['request_id'],
        },
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
    },
    'filters': {
        'request_id': {
            '()': 'hairmixer_app.middleware.RequestIDFilter',
        }
    },
}

# Cache (simple backend by default; replace in production)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'hairmixer-cache',
    }
}

# Recommendation cache timeout
RECOMMENDATION_CACHE_TIMEOUT = int(
    os.getenv('RECOMMENDATION_CACHE_TIMEOUT', '3600')
)

# Security settings (harden in production)
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SAMESITE = os.getenv(
    'SESSION_COOKIE_SAMESITE', AUTH_COOKIE_SAMESITE
)
CSRF_COOKIE_SAMESITE = os.getenv(
    'CSRF_COOKIE_SAMESITE', AUTH_COOKIE_SAMESITE
)
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_HSTS_SECONDS = 0 if DEBUG else int(
    os.getenv('SECURE_HSTS_SECONDS', '31536000')
)
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG
X_FRAME_OPTIONS = 'DENY'

# ==========================
# Overlay / Gemini AI config
# ==========================
# When enabled and credentials are present, the "advanced" overlay path
# uses Gemini Web API for hair editing; otherwise it falls back to basic.
OVERLAY_AI_ENABLED = os.getenv('OVERLAY_AI_ENABLED', 'true').lower() == 'true'
# Accept multiple env var names for convenience/compatibility
GEMINI_SECURE_1PSID = (
    os.getenv('GEMINI_SECURE_1PSID')
    or os.getenv('SECURE_1PSID')
    or os.getenv('Secure_1PSID')
    or ''
)
GEMINI_SECURE_1PSIDTS = (
    os.getenv('GEMINI_SECURE_1PSIDTS')
    or os.getenv('SECURE_1PSIDTS')
    or os.getenv('Secure_1PSIDTS')
    or ''
)
# Model string as per gemini_webapi.constants.Model (e.g., G_2_5_FLASH)
GEMINI_MODEL = os.getenv('GEMINI_MODEL', 'G_2_5_FLASH')
GEMINI_TIMEOUT = int(os.getenv('GEMINI_TIMEOUT', '120'))

# Basic overlay tuning
OVERLAY_BASIC_WIDTH_RATIO = float(
    os.getenv('OVERLAY_BASIC_WIDTH_RATIO', '0.75')
)
OVERLAY_Y_OFFSET_RATIO = float(os.getenv('OVERLAY_Y_OFFSET_RATIO', '0.03'))
OVERLAY_BLUR_RADIUS = float(os.getenv('OVERLAY_BLUR_RADIUS', '0.8'))

# API Schema / Docs (drf-spectacular)
SPECTACULAR_SETTINGS = {
    'TITLE': 'HairMixer API',
    'DESCRIPTION': 'REST API for HairMixer backend.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}
